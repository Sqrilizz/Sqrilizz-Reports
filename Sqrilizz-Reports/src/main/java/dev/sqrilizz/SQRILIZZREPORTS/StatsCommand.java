package dev.sqrilizz.SQRILIZZREPORTS;

import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;

import java.util.List;
import java.util.Map;

public class StatsCommand implements CommandExecutor {
    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (!(sender instanceof Player)) {
            sender.sendMessage(LanguageManager.getMessage("player-only"));
            return true;
        }

        Player player = (Player) sender;

        if (!VersionUtils.hasPermission(player, "reports.admin")) {
            VersionUtils.sendMessage(player, LanguageManager.getMessage("no-permission"));
            return true;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–≥–∏–Ω–∞
        showPluginStats(player);
        
        return true;
    }
    
    private void showPluginStats(Player player) {
        VersionUtils.sendMessage(player, LanguageManager.getMessage("stats-header"));
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
        Map<String, List<ReportManager.Report>> reports = ReportManager.getReports();
        int totalReports = reports.values().stream().mapToInt(List::size).sum();
        int uniquePlayers = reports.size();
        
        VersionUtils.sendMessage(player, ColorManager.colorize("{secondary}üìä –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {accent}" + totalReports));
        VersionUtils.sendMessage(player, ColorManager.colorize("{secondary}üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {accent}" + uniquePlayers));
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω
        VersionUtils.sendMessage(player, ColorManager.colorize("{secondary}üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω:"));
        VersionUtils.sendMessage(player, ColorManager.colorize("{info}  " + NameUtils.getCleaningStats()));
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        VersionUtils.sendMessage(player, ColorManager.colorize("{secondary}üñ•Ô∏è –í–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {accent}" + VersionUtils.getServerVersion()));
        VersionUtils.sendMessage(player, ColorManager.colorize("{secondary}‚öôÔ∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {accent}" + (VersionUtils.isFoliaServer() ? "Folia" : "Paper/Spigot")));
        VersionUtils.sendMessage(player, ColorManager.colorize("{secondary}üåê –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤: {accent}" + VersionUtils.getOnlinePlayersCount()));
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        VersionUtils.sendMessage(player, ColorManager.colorize("{secondary}üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:"));
        String telegramStatus = TelegramManager.isEnabled() ? "{success}‚úÖ –í–∫–ª—é—á–µ–Ω" : "{error}‚ùå –í—ã–∫–ª—é—á–µ–Ω";
        VersionUtils.sendMessage(player, ColorManager.colorize("{secondary}  üì± Telegram: " + telegramStatus));
        
        String discordWebhookStatus = DiscordWebhookManager.getWebhookUrl().isEmpty() ? "{error}‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" : "{success}‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω";
        VersionUtils.sendMessage(player, ColorManager.colorize("{secondary}  üîó Discord Webhook: " + discordWebhookStatus));
        
        String discordBotStatus = DiscordBot.isEnabled() ? "{success}‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "{error}‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω";
        VersionUtils.sendMessage(player, ColorManager.colorize("{secondary}  ü§ñ Discord Bot: " + discordBotStatus));
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∑–∞–π–Ω–∞
        String hexStatus = ColorManager.isHexSupported() ? "{success}‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è" : "{warning}‚ö†Ô∏è Legacy —Ä–µ–∂–∏–º";
        VersionUtils.sendMessage(player, ColorManager.colorize("{secondary}üé® Hex —Ü–≤–µ—Ç–∞: " + hexStatus));
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è–∑—ã–∫–∞
        String currentLang = getLanguageDisplayName(LanguageManager.getCurrentLanguage());
        VersionUtils.sendMessage(player, ColorManager.colorize("{secondary}üåç –Ø–∑—ã–∫: {accent}" + currentLang));
        
        VersionUtils.sendMessage(player, LanguageManager.getMessage("stats-footer"));
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —è–∑—ã–∫–∞
     */
    private String getLanguageDisplayName(String code) {
        switch (code.toLowerCase()) {
            case "ru": return "üá∑üá∫ –†—É—Å—Å–∫–∏–π";
            case "en": return "üá∫üá∏ English";
            case "ar": return "üá∏üá¶ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©";
            default: return code.toUpperCase();
        }
    }
}
