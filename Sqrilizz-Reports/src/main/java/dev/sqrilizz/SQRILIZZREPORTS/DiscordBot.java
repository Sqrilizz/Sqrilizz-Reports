package dev.sqrilizz.SQRILIZZREPORTS;

import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.JDABuilder;
import net.dv8tion.jda.api.Permission;
import net.dv8tion.jda.api.entities.*;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.events.session.ReadyEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.commands.OptionType;
import net.dv8tion.jda.api.interactions.commands.build.Commands;
import net.dv8tion.jda.api.requests.GatewayIntent;
import org.bukkit.Bukkit;
import org.bukkit.OfflinePlayer;
import org.bukkit.configuration.file.FileConfiguration;

import java.awt.Color;
import java.time.Instant;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Discord Bot –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ Discord
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã: /ban, /kick, /mute, /warn, /reports
 */
public class DiscordBot extends ListenerAdapter {
    
    private static JDA jda;
    private static boolean enabled = false;
    private static String guildId;
    private static String channelId;
    private static List<String> modRoles;
    private static boolean moderationEnabled = false;
    private static final Map<Long, Long> commandCooldowns = new ConcurrentHashMap<>();
    private static final long REPORTS_COOLDOWN_MS = 4000L; // 4 seconds
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Discord –±–æ—Ç–∞
     */
    public static void initialize() {
        FileConfiguration config = Main.getInstance().getConfig();
        
        enabled = config.getBoolean("discord-bot.enabled", false);
        if (!enabled) {
            Main.getInstance().getLogger().info("Discord Bot disabled in config");
            return;
        }
        
        String token = config.getString("discord-bot.token", "");
        if (token.isEmpty()) {
            Main.getInstance().getLogger().warning("Discord Bot token not set!");
            return;
        }
        
        guildId = config.getString("discord-bot.guild-id", "");
        channelId = config.getString("discord-bot.channel-id", "");
        modRoles = config.getStringList("discord-bot.mod-roles");
        moderationEnabled = config.getBoolean("discord-bot.moderation.enabled", false);
        
        try {
            jda = JDABuilder.createDefault(token)
                    .addEventListeners(new DiscordBot())
                    .enableIntents(GatewayIntent.GUILD_MESSAGES, GatewayIntent.MESSAGE_CONTENT)
                    .build();
                    
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
            String status = config.getString("discord-bot.status", "Watching reports üëÄ");
            jda.awaitReady();
            jda.getPresence().setActivity(Activity.watching(status));
            
            Main.getInstance().getLogger().info("Discord Bot successfully initialized!");
            
        } catch (Exception e) {
            Main.getInstance().getLogger().severe("Failed to initialize Discord Bot: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
     */
    public static void shutdown() {
        if (jda != null) {
            jda.shutdown();
            try {
                if (!jda.awaitShutdown(10, TimeUnit.SECONDS)) {
                    jda.shutdownNow();
                }
            } catch (InterruptedException e) {
                jda.shutdownNow();
            }
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç
     */
    public static boolean isEnabled() {
        return enabled && jda != null;
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∂–∞–ª–æ–±–µ –≤ Discord
     */
    public static void sendReportNotification(String reporter, String target, String reason, long timestamp, String reporterLoc, String targetLoc, boolean isAnonymous) {
        if (!isEnabled() || channelId.isEmpty()) return;
        
        TextChannel channel = jda.getTextChannelById(channelId);
        if (channel == null) return;
        
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π embed
        var embed = new net.dv8tion.jda.api.EmbedBuilder()
                .setTitle("üö® –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞")
                .setColor(Color.RED)
                .addField("üë§ –ñ–∞–ª–æ–±—â–∏–∫", isAnonymous ? "*–ê–Ω–æ–Ω–∏–º–Ω–æ*" : reporter, true)
                .addField("üéØ –¶–µ–ª—å", target, true)
                .addField("üìù –ü—Ä–∏—á–∏–Ω–∞", reason, false)
                .addField("üìç –õ–æ–∫–∞—Ü–∏—è –∂–∞–ª–æ–±—â–∏–∫–∞", reporterLoc, true)
                .addField("üìç –õ–æ–∫–∞—Ü–∏—è —Ü–µ–ª–∏", targetLoc, true)
                .setTimestamp(Instant.ofEpochMilli(timestamp))
                .setFooter("Sqrilizz-Reports", null)
                .build();
                
        channel.sendMessageEmbeds(embed).queue();
    }
    
    @Override
    public void onReady(ReadyEvent event) {
        Main.getInstance().getLogger().info("Discord Bot is ready! Logged in as: " + event.getJDA().getSelfUser().getAsTag());
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º slash –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
        if (moderationEnabled && !guildId.isEmpty()) {
            Guild guild = jda.getGuildById(guildId);
            if (guild != null) {
                registerSlashCommands(guild);
            }
        }
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç slash –∫–æ–º–∞–Ω–¥—ã
     */
    private void registerSlashCommands(Guild guild) {
        FileConfiguration config = Main.getInstance().getConfig();
        
        var commands = guild.updateCommands();
        
        if (config.getBoolean("discord-bot.moderation.commands.ban", true)) {
            commands.addCommands(Commands.slash("ban", "–ó–∞–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞")
                    .addOption(OptionType.STRING, "player", "–ò–º—è –∏–≥—Ä–æ–∫–∞", true)
                    .addOption(OptionType.STRING, "reason", "–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞", false));
        }
        
        if (config.getBoolean("discord-bot.moderation.commands.kick", true)) {
            commands.addCommands(Commands.slash("kick", "–ö–∏–∫–Ω—É—Ç—å –∏–≥—Ä–æ–∫–∞")
                    .addOption(OptionType.STRING, "player", "–ò–º—è –∏–≥—Ä–æ–∫–∞", true)
                    .addOption(OptionType.STRING, "reason", "–ü—Ä–∏—á–∏–Ω–∞ –∫–∏–∫–∞", false));
        }
        
        if (config.getBoolean("discord-bot.moderation.commands.mute", true)) {
            commands.addCommands(Commands.slash("mute", "–ó–∞–º—É—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–∞")
                    .addOption(OptionType.STRING, "player", "–ò–º—è –∏–≥—Ä–æ–∫–∞", true)
                    .addOption(OptionType.INTEGER, "duration", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö", false)
                    .addOption(OptionType.STRING, "reason", "–ü—Ä–∏—á–∏–Ω–∞ –º—É—Ç–∞", false));
        }
        
        if (config.getBoolean("discord-bot.moderation.commands.warn", true)) {
            commands.addCommands(Commands.slash("warn", "–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –∏–≥—Ä–æ–∫–∞")
                    .addOption(OptionType.STRING, "player", "–ò–º—è –∏–≥—Ä–æ–∫–∞", true)
                    .addOption(OptionType.STRING, "reason", "–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", false));
        }
        
        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–∞–ª–æ–±
        commands.addCommands(Commands.slash("reports", "–ü—Ä–æ—Å–º–æ—Ç—Ä –∂–∞–ª–æ–±")
                .addOption(OptionType.STRING, "player", "–ò–º—è –∏–≥—Ä–æ–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", false));

        // –ö–æ–º–∞–Ω–¥–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∂–∞–ª–æ–±—ã
        commands.addCommands(Commands.slash("report-resolve", "–ó–∞–∫—Ä—ã—Ç—å –∂–∞–ª–æ–±—É –ø–æ ID")
                .addOption(OptionType.INTEGER, "id", "ID –∂–∞–ª–æ–±—ã", true));

        // –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∂–∞–ª–æ–±—É
        commands.addCommands(Commands.slash("report-reply", "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∂–∞–ª–æ–±—É")
                .addOption(OptionType.INTEGER, "id", "ID –∂–∞–ª–æ–±—ã", true)
                .addOption(OptionType.STRING, "message", "–°–æ–æ–±—â–µ–Ω–∏–µ", true));
        
        commands.queue(success -> {
            Main.getInstance().getLogger().info("Discord slash commands registered successfully!");
        }, error -> {
            Main.getInstance().getLogger().severe("Failed to register Discord slash commands: " + error.getMessage());
        });
    }
    
    @Override
    public void onSlashCommandInteraction(SlashCommandInteractionEvent event) {
        if (!moderationEnabled) {
            event.reply("‚ùå –ú–æ–¥–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Discord –æ—Ç–∫–ª—é—á–µ–Ω–∞").setEphemeral(true).queue();
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!hasModeratorRole(event.getMember())) {
            event.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã").setEphemeral(true).queue();
            return;
        }
        
        String command = event.getName();
        String playerName = event.getOption("player") != null ? event.getOption("player").getAsString() : null;
        String reason = event.getOption("reason") != null ? event.getOption("reason").getAsString() : "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
        
        switch (command) {
            case "ban":
                handleBanCommand(event, playerName, reason);
                break;
            case "kick":
                handleKickCommand(event, playerName, reason);
                break;
            case "mute":
                int duration = event.getOption("duration") != null ? event.getOption("duration").getAsInt() : 60;
                handleMuteCommand(event, playerName, duration, reason);
                break;
            case "warn":
                handleWarnCommand(event, playerName, reason);
                break;
            case "reports":
                if (!checkCooldown(event.getUser().getIdLong())) {
                    event.reply("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º /reports").setEphemeral(true).queue();
                } else {
                    handleReportsCommand(event, playerName);
                }
                break;
            case "report-resolve":
                long id = event.getOption("id") != null ? event.getOption("id").getAsLong() : -1;
                handleResolveCommand(event, id);
                break;
            case "report-reply":
                long rid = event.getOption("id") != null ? event.getOption("id").getAsLong() : -1;
                String msg = event.getOption("message") != null ? event.getOption("message").getAsString() : null;
                handleReplyCommand(event, rid, msg);
                break;
        }
    }

    private boolean checkCooldown(long userId) {
        long now = System.currentTimeMillis();
        Long last = commandCooldowns.get(userId);
        if (last != null && now - last < REPORTS_COOLDOWN_MS) return false;
        commandCooldowns.put(userId, now);
        return true;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
     */
    private boolean hasModeratorRole(Member member) {
        if (member == null) return false;
        if (member.hasPermission(Permission.ADMINISTRATOR)) return true;
        
        return member.getRoles().stream()
                .anyMatch(role -> modRoles.contains(role.getId()));
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–∞–Ω–∞
     */
    private void handleBanCommand(SlashCommandInteractionEvent event, String playerName, String reason) {
        if (playerName == null) {
            event.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞").setEphemeral(true).queue();
            return;
        }
        
        Main.runTask(() -> {
            OfflinePlayer player = Bukkit.getOfflinePlayer(playerName);
            if (player == null) {
                event.reply("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω").setEphemeral(true).queue();
                return;
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–Ω —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
            String banCommand = String.format("ban %s %s", playerName, reason);
            Bukkit.dispatchCommand(Bukkit.getConsoleSender(), banCommand);
            
            event.reply(String.format("‚úÖ –ò–≥—Ä–æ–∫ **%s** –∑–∞–±–∞–Ω–µ–Ω\nüìù –ü—Ä–∏—á–∏–Ω–∞: %s", playerName, reason)).queue();
            
            Main.getInstance().getLogger().info(String.format("Player %s banned via Discord by %s. Reason: %s", 
                    playerName, event.getUser().getName(), reason));
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∫–∏–∫–∞
     */
    private void handleKickCommand(SlashCommandInteractionEvent event, String playerName, String reason) {
        if (playerName == null) {
            event.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞").setEphemeral(true).queue();
            return;
        }
        
        Main.runTask(() -> {
            var player = Bukkit.getPlayer(playerName);
            if (player == null || !player.isOnline()) {
                event.reply("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –≤ —Å–µ—Ç–∏").setEphemeral(true).queue();
                return;
            }
            
            player.kickPlayer(ColorManager.colorize("{error}–í—ã –±—ã–ª–∏ –∫–∏–∫–Ω—É—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞\n{secondary}–ü—Ä–∏—á–∏–Ω–∞: " + reason));
            
            event.reply(String.format("‚úÖ –ò–≥—Ä–æ–∫ **%s** –∫–∏–∫–Ω—É—Ç\nüìù –ü—Ä–∏—á–∏–Ω–∞: %s", playerName, reason)).queue();
            
            Main.getInstance().getLogger().info(String.format("Player %s kicked via Discord by %s. Reason: %s", 
                    playerName, event.getUser().getName(), reason));
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –º—É—Ç–∞
     */
    private void handleMuteCommand(SlashCommandInteractionEvent event, String playerName, int duration, String reason) {
        if (playerName == null) {
            event.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞").setEphemeral(true).queue();
            return;
        }
        
        Main.runTask(() -> {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –º—É—Ç —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–ª–∞–≥–∏–Ω –¥–ª—è –º—É—Ç–æ–≤)
            String muteCommand = String.format("mute %s %dm %s", playerName, duration, reason);
            Bukkit.dispatchCommand(Bukkit.getConsoleSender(), muteCommand);
            
            event.reply(String.format("‚úÖ –ò–≥—Ä–æ–∫ **%s** –∑–∞–º—É—á–µ–Ω –Ω–∞ %d –º–∏–Ω—É—Ç\nüìù –ü—Ä–∏—á–∏–Ω–∞: %s", playerName, duration, reason)).queue();
            
            Main.getInstance().getLogger().info(String.format("Player %s muted via Discord by %s for %d minutes. Reason: %s", 
                    playerName, event.getUser().getName(), duration, reason));
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
     */
    private void handleWarnCommand(SlashCommandInteractionEvent event, String playerName, String reason) {
        if (playerName == null) {
            event.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞").setEphemeral(true).queue();
            return;
        }
        
        Main.runTask(() -> {
            var player = Bukkit.getPlayer(playerName);
            if (player != null && player.isOnline()) {
                VersionUtils.sendMessage(player, ColorManager.colorize("{warning}‚ö†Ô∏è {bold}–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï{reset}\n{secondary}–ü—Ä–∏—á–∏–Ω–∞: {info}" + reason));
            }
            
            event.reply(String.format("‚úÖ –ò–≥—Ä–æ–∫ **%s** –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω\nüìù –ü—Ä–∏—á–∏–Ω–∞: %s", playerName, reason)).queue();
            
            Main.getInstance().getLogger().info(String.format("Player %s warned via Discord by %s. Reason: %s", 
                    playerName, event.getUser().getName(), reason));
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–∞–ª–æ–±
     */
    private void handleReportsCommand(SlashCommandInteractionEvent event, String playerName) {
        Main.runTask(() -> {
            if (playerName == null) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                var reports = ReportManager.getReports();
                int totalReports = reports.values().stream().mapToInt(List::size).sum();
                
                var embed = new net.dv8tion.jda.api.EmbedBuilder()
                        .setTitle("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∞–ª–æ–±")
                        .setColor(Color.BLUE)
                        .addField("üìã –í—Å–µ–≥–æ –∂–∞–ª–æ–±", String.valueOf(totalReports), true)
                        .addField("üë• –ò–≥—Ä–æ–∫–æ–≤ —Å –∂–∞–ª–æ–±–∞–º–∏", String.valueOf(reports.size()), true)
                        .setTimestamp(Instant.now())
                        .build();
                        
                event.replyEmbeds(embed).queue();
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∂–∞–ª–æ–±—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                var playerReports = ReportManager.getReports().get(playerName);
                if (playerReports == null || playerReports.isEmpty()) {
                    event.reply(String.format("üìã –ù–∞ –∏–≥—Ä–æ–∫–∞ **%s** –Ω–µ—Ç –∂–∞–ª–æ–±", playerName)).queue();
                    return;
                }
                
                var embed = new net.dv8tion.jda.api.EmbedBuilder()
                        .setTitle(String.format("üìã –ñ–∞–ª–æ–±—ã –Ω–∞ %s", playerName))
                        .setColor(Color.ORANGE)
                        .addField("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", String.valueOf(playerReports.size()), true);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∂–∞–ª–æ–±
                int count = Math.min(5, playerReports.size());
                for (int i = 0; i < count; i++) {
                    var report = playerReports.get(i);
                    embed.addField(
                            String.format("–ñ–∞–ª–æ–±–∞ #%d", i + 1),
                            String.format("**–û—Ç:** %s\n**–ü—Ä–∏—á–∏–Ω–∞:** %s", report.reporter, report.reason),
                            false
                    );
                }
                
                if (playerReports.size() > 5) {
                    embed.setFooter(String.format("–ò –µ—â–µ %d –∂–∞–ª–æ–±...", playerReports.size() - 5));
                }
                
                event.replyEmbeds(embed.build()).queue();
            }
        });
    }

    private void handleResolveCommand(SlashCommandInteractionEvent event, long id) {
        if (id <= 0) {
            event.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∂–∞–ª–æ–±—ã").setEphemeral(true).queue();
            return;
        }
        Main.runTask(() -> {
            boolean ok = ReportManager.resolveReport(id, event.getUser().getName());
            if (ok) {
                event.reply("‚úÖ –ñ–∞–ª–æ–±–∞ #" + id + " –∑–∞–∫—Ä—ã—Ç–∞").queue();
            } else {
                event.reply("‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞").setEphemeral(true).queue();
            }
        });
    }

    private void handleReplyCommand(SlashCommandInteractionEvent event, long id, String message) {
        if (id <= 0 || message == null || message.trim().isEmpty()) {
            event.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ").setEphemeral(true).queue();
            return;
        }
        Main.runTask(() -> {
            boolean ok = ReportManager.addReply(id, event.getUser().getName(), message);
            if (ok) {
                event.reply("‚úÖ –û—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∂–∞–ª–æ–±–µ #" + id).queue();
            } else {
                event.reply("‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞").setEphemeral(true).queue();
            }
        });
    }
}
