package dev.sqrilizz.SQRILIZZREPORTS.lifecycle;

import dev.sqrilizz.SQRILIZZREPORTS.Main;
import dev.sqrilizz.SQRILIZZREPORTS.api.CacheManager;
import dev.sqrilizz.SQRILIZZREPORTS.api.RESTServer;
import dev.sqrilizz.SQRILIZZREPORTS.db.DatabaseManager;
import dev.sqrilizz.SQRILIZZREPORTS.monitoring.PerformanceMonitor;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * –°–∏—Å—Ç–µ–º–∞ graceful shutdown –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
 */
public class ShutdownManager {
    
    private static final AtomicBoolean isShuttingDown = new AtomicBoolean(false);
    private static final ExecutorService shutdownExecutor = Executors.newSingleThreadExecutor(r -> {
        Thread t = new Thread(r, "SQRILIZZ-Shutdown");
        t.setDaemon(true);
        return t;
    });
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É graceful shutdown
     */
    public static void initialize() {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º shutdown hook –¥–ª—è JVM
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            if (!isShuttingDown.get()) {
                performGracefulShutdown();
            }
        }, "SQRILIZZ-ShutdownHook"));
        
        Main.getInstance().getLogger().info("Graceful shutdown system initialized");
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å graceful shutdown –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    public static void performGracefulShutdown() {
        if (isShuttingDown.compareAndSet(false, true)) {
            Main.getInstance().getLogger().info("üîÑ Starting graceful shutdown...");
            
            long startTime = System.currentTimeMillis();
            
            try {
                // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
                CompletableFuture<Void> allShutdowns = CompletableFuture.allOf(
                    shutdownRESTServer(),
                    shutdownDatabase(),
                    shutdownCache(),
                    shutdownDiscordBot(),
                    shutdownTelegramBot(),
                    savePerformanceReport()
                );
                
                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥)
                allShutdowns.get(30, TimeUnit.SECONDS);
                
                long duration = System.currentTimeMillis() - startTime;
                Main.getInstance().getLogger().info("‚úÖ Graceful shutdown completed in " + duration + "ms");
                
            } catch (Exception e) {
                Main.getInstance().getLogger().warning("‚ö†Ô∏è Some components failed to shutdown gracefully: " + e.getMessage());
            } finally {
                shutdownExecutor.shutdown();
            }
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ shutdown
     */
    public static boolean isShuttingDown() {
        return isShuttingDown.get();
    }
    
    private static CompletableFuture<Void> shutdownRESTServer() {
        return CompletableFuture.runAsync(() -> {
            try {
                Main.getInstance().getLogger().info("üåê Shutting down REST server...");
                RESTServer.shutdown();
                Main.getInstance().getLogger().info("‚úÖ REST server shutdown complete");
            } catch (Exception e) {
                Main.getInstance().getLogger().warning("‚ùå REST server shutdown failed: " + e.getMessage());
            }
        }, shutdownExecutor);
    }
    
    private static CompletableFuture<Void> shutdownDatabase() {
        return CompletableFuture.runAsync(() -> {
            try {
                Main.getInstance().getLogger().info("üíæ Shutting down database connections...");
                DatabaseManager.close();
                Main.getInstance().getLogger().info("‚úÖ Database shutdown complete");
            } catch (Exception e) {
                Main.getInstance().getLogger().warning("‚ùå Database shutdown failed: " + e.getMessage());
            }
        }, shutdownExecutor);
    }
    
    private static CompletableFuture<Void> shutdownCache() {
        return CompletableFuture.runAsync(() -> {
            try {
                Main.getInstance().getLogger().info("‚ö° Shutting down cache system...");
                CacheManager.cleanUp();
                Main.getInstance().getLogger().info("‚úÖ Cache shutdown complete");
            } catch (Exception e) {
                Main.getInstance().getLogger().warning("‚ùå Cache shutdown failed: " + e.getMessage());
            }
        }, shutdownExecutor);
    }
    
    private static CompletableFuture<Void> shutdownDiscordBot() {
        return CompletableFuture.runAsync(() -> {
            try {
                Main.getInstance().getLogger().info("ü§ñ Shutting down Discord bot...");
                // DiscordBot.shutdown(); // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥
                Main.getInstance().getLogger().info("‚úÖ Discord bot shutdown complete");
            } catch (Exception e) {
                Main.getInstance().getLogger().warning("‚ùå Discord bot shutdown failed: " + e.getMessage());
            }
        }, shutdownExecutor);
    }
    
    private static CompletableFuture<Void> shutdownTelegramBot() {
        return CompletableFuture.runAsync(() -> {
            try {
                Main.getInstance().getLogger().info("üì± Shutting down Telegram bot...");
                // TelegramManager.shutdown(); // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥
                Main.getInstance().getLogger().info("‚úÖ Telegram bot shutdown complete");
            } catch (Exception e) {
                Main.getInstance().getLogger().warning("‚ùå Telegram bot shutdown failed: " + e.getMessage());
            }
        }, shutdownExecutor);
    }
    
    private static CompletableFuture<Void> savePerformanceReport() {
        return CompletableFuture.runAsync(() -> {
            try {
                Main.getInstance().getLogger().info("üìä Saving final performance report...");
                String report = PerformanceMonitor.getHealthReport();
                Main.getInstance().getLogger().info("Final Performance Report:\n" + report);
                Main.getInstance().getLogger().info("‚úÖ Performance report saved");
            } catch (Exception e) {
                Main.getInstance().getLogger().warning("‚ùå Performance report save failed: " + e.getMessage());
            }
        }, shutdownExecutor);
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
     */
    public static void forceShutdown() {
        Main.getInstance().getLogger().warning("üö® FORCE SHUTDOWN INITIATED");
        isShuttingDown.set(true);
        
        try {
            shutdownExecutor.shutdownNow();
            if (!shutdownExecutor.awaitTermination(5, TimeUnit.SECONDS)) {
                Main.getInstance().getLogger().severe("‚ùå Force shutdown timeout");
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}
